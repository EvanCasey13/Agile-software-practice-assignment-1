{"version":3,"file":"static/js/581.f2acd563.chunk.js","mappings":"4HAuBE,IArBF,SAAqBA,EAAOC,GAExB,OAA4CC,EAAAA,EAAAA,UAASF,GAAM,eAApDG,EAAc,KAAEC,EAAiB,KAgBxC,OAfAC,EAAAA,EAAAA,YACE,WAEE,IAAMC,EAAUC,YAAW,WACzBH,EAAkBJ,EACpB,GAAGC,GAIH,OAAO,WACLO,aAAaF,EACf,CACF,GACA,CAACN,EAAOC,IAEHE,CACT,C,6ICuCF,UAjDwB,SAACM,GAEvB,OAAoCP,EAAAA,EAAAA,UAAS,IAAG,eAAzCQ,EAAU,KAAEC,EAAa,KAC1BC,GAAsBC,EAAAA,EAAAA,GAAYH,EAAY,KAMpD,GAA8CI,EAAAA,EAAAA,UAAS,CAAC,gBAAiB,CAAEF,oBAAAA,KAAwB,kBAAMG,EAAAA,EAAAA,IAAaH,EAAoB,GAAE,CAAEI,UAAWJ,IAAhJK,EAAI,EAAJA,KAAMC,EAAK,EAALA,MAAOC,EAAS,EAATA,UAAWC,EAAO,EAAPA,QAEjC,GAAID,EACF,OAAO,SAAC,IAAO,IAGjB,GAAIC,EACF,OAAO,wBAAKF,EAAMG,UAEpB,IAAMC,EAAa,OAAJL,QAAI,IAAJA,OAAI,EAAJA,EAAMM,QAGfC,EAAkB,OAANF,QAAM,IAANA,OAAM,EAANA,EAAQG,QAAO,SAAAC,GAAC,OAAK,OAADA,QAAC,IAADA,OAAC,EAADA,EAAGC,QAAQ,IACjDC,aAAaC,QAAQ,YAAaC,KAAKC,UAAUP,IAGjD,OACE,iBAAKQ,UAAU,SAAQ,WACrB,SAAC,IAAU,KACb,6BACI,SAAC,IAAS,CACdC,GAAG,gBACHC,WAAS,EACTC,MAAM,qBACNC,KAAK,aACLC,QAAQ,SACRrC,MAAOU,EACP4B,SA/ByB,SAACC,GAC1B5B,EAAc4B,EAAEC,OAAOxC,MACzB,KA+BM,sBAGA,SAAC,IAAY,CACfyC,KAAK,kBACLnB,OAAQA,MAId,C","sources":["hooks/useDebounce.js","pages/searchActorPage.js"],"sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nfunction useDebounce(value, delay) {\r\n    // State and setters for debounced value\r\n    const [debouncedValue, setDebouncedValue] = useState(value);\r\n    useEffect(\r\n      () => {\r\n        // Update debounced value after delay\r\n        const handler = setTimeout(() => {\r\n          setDebouncedValue(value);\r\n        }, delay);\r\n        // Cancel the timeout if value changes (also on delay change or unmount)\r\n        // This is how we prevent debounced value from updating if value is changed ...\r\n        // .. within the delay period. Timeout gets cleared and restarted.\r\n        return () => {\r\n          clearTimeout(handler);\r\n        };\r\n      },\r\n      [value, delay] // Only re-call effect if value or delay changes\r\n    );\r\n    return debouncedValue;\r\n  }\r\n\r\n  export default useDebounce;","import React, { useState, useContext } from \"react\";\r\nimport AuthContext from \"../AuthContext\";\r\nimport { Navigate } from 'react-router-dom';\r\nimport PageTemplate from '../components/templateActorListPage';\r\nimport TextField from \"@mui/material/TextField\";\r\nimport { searchActors } from \"../api/tmdb-api\";\r\nimport { useQuery } from 'react-query';\r\nimport useDebounce from \"../hooks/useDebounce\"\r\nimport Spinner from '../components/spinner';\r\nimport SiteHeader from './../components/siteHeader'\r\n\r\nconst SearchActorPage = (props) => {\r\n\r\n  const [searchTerm, setSearchTerm] = useState(\"\")\r\n  const debouncedSearchTerm = useDebounce(searchTerm, 1000);\r\n  \r\n  const handleSearchChange = (e) => {\r\n    setSearchTerm(e.target.value)\r\n  }\r\n\r\n  const {  data, error, isLoading, isError }  = useQuery(['search/actors', { debouncedSearchTerm }], () => searchActors(debouncedSearchTerm), { enabled: !!debouncedSearchTerm})\r\n\r\n  if (isLoading) {\r\n    return <Spinner />\r\n  }\r\n\r\n  if (isError) {\r\n    return <h1>{error.message}</h1>\r\n  }  \r\n  const actors = data?.results;\r\n\r\n  // Redundant, but necessary to avoid app crashing.\r\n  const favorites = actors?.filter(a => a?.favorite)\r\n  localStorage.setItem('favorites', JSON.stringify(favorites))\r\n  const addToFavorites = (actorId) => true \r\n\r\n  return (\r\n    <div className=\"actors\">\r\n      <SiteHeader />\r\n    <form>\r\n        <TextField\r\n    id=\"filled-search\"\r\n    fullWidth \r\n    label=\"Search for a actor\"\r\n    type=\"searchTMDB\"\r\n    variant=\"filled\"\r\n    value={searchTerm}\r\n    onChange={handleSearchChange}\r\n        />\r\n        <br></br>\r\n        </form>\r\n\r\n        <PageTemplate\r\n      name='Discover Actors'\r\n      actors={actors}\r\n    />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchActorPage;"],"names":["value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","props","searchTerm","setSearchTerm","debouncedSearchTerm","useDebounce","useQuery","searchActors","enabled","data","error","isLoading","isError","message","actors","results","favorites","filter","a","favorite","localStorage","setItem","JSON","stringify","className","id","fullWidth","label","type","variant","onChange","e","target","name"],"sourceRoot":""}